"""
    scalar_squared_mass_matrix(fields, params)

Compute the squared scalar mass matrix given values for the fileds `fields` and
parameters `params`.

# Example
```julia
julia> flds = Fields([1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
julia> pars = Params([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
julia> scalar_squared_mass_matrix(flds, pars)
[2.0, 6.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
```
"""
function scalar_squared_mass_matrix(
    fields::Fields{T},
    params::Params{U}
) where {T<:Real,U<:Real}

    r1 = fields.r1
    r2 = fields.r2
    c1 = fields.c1
    c2 = fields.c2
    c3 = fields.c3
    c4 = fields.c4
    i1 = fields.i1
    i2 = fields.i2

    m112 = params.m112
    m122 = params.m122
    m222 = params.m222
    λ1 = params.λ1
    λ2 = params.λ2
    λ3 = params.λ3
    λ4 = params.λ4
    λ5 = params.λ5
    g = params.g
    gp = params.gp
    ξ = params.ξ

    M11 = (2 * i1^2 * λ1 + 2 * c3^2 * λ3 + 2 * c4^2 * λ3 + 2 * i2^2 * λ3 +
           2 * i2^2 * λ4 - 2 * i2^2 * λ5 +
           4 * m112 + 6 * λ1 * r1^2 + 2 * λ3 * r2^2 + 2 * λ4 * r2^2 +
           2 * λ5 * r2^2 + g^2 * i1^2 * ξ + gp^2 * i1^2 * ξ +
           c1^2 * (2 * λ1 + g^2 * ξ) + c2^2 * (2 * λ1 + g^2 * ξ)) / 4
    M12 = (4 * i1 * i2 * λ5 + 2 * c1 * c3 * (λ4 + λ5) +
           2 * c2 * c4 * (λ4 + λ5) - 4 * m122 +
           4 * (λ3 + λ4 + λ5) * r1 * r2 +
           (c1 * c3 * g^2 + c2 * c4 * g^2 + (g^2 + gp^2) * i1 * i2) * ξ) / 4
    M13 = (2 * c4 * i2 * (λ4 - λ5) + 2 * c3 * λ4 * r2 + 2 * c3 * λ5 * r2 +
           c2 * gp^2 * i1 * ξ + c1 * r1 * (4 * λ1 - g^2 * ξ)) / 4
    M14 = (2 * c3 * i2 * (-λ4 + λ5) + 2 * c4 * λ4 * r2 + 2 * c4 * λ5 * r2 -
           c1 * gp^2 * i1 * ξ + c2 * r1 * (4 * λ1 - g^2 * ξ)) / 4
    M15 = (4 * c3 * λ3 * r1 + 2 * c1 * λ4 * r2 + 2 * c1 * λ5 * r2 -
           c4 * g^2 * i1 * ξ + c4 * gp^2 * i1 * ξ - c1 * g^2 * r2 * ξ +
           c2 * i2 * (-2 * λ4 + 2 * λ5 + g^2 * ξ)) / 4
    M16 = (4 * c4 * λ3 * r1 + 2 * c2 * λ4 * r2 + 2 * c2 * λ5 * r2 +
           c3 * g^2 * i1 * ξ - c3 * gp^2 * i1 * ξ - c2 * g^2 * r2 * ξ +
           c1 * i2 * (2 * λ4 - 2 * λ5 - g^2 * ξ)) / 4
    M17 = i1 * λ1 * r1 + i2 * λ5 * r2 - ((g^2 + gp^2) * i1 * r1 * ξ) / 4
    M18 = (c1 * c4 * (λ4 - λ5)) / 2. + (c2 * c3 * (-λ4 + λ5)) / 2. +
          i2 * (λ3 + λ4 - λ5) * r1 + i1 * λ5 * r2 -
          ((c2 * c3 * g^2 - c1 * c4 * g^2 + (g^2 + gp^2) * i1 * r2) * ξ) / 4
    M22 = (2 * i2^2 * λ2 + 2 * c1^2 * λ3 + 2 * c2^2 * λ3 + 2 * i1^2 * λ3 +
           2 * i1^2 * λ4 - 2 * i1^2 * λ5 +
           4 * m222 + 2 * λ3 * r1^2 + 2 * λ4 * r1^2 + 2 * λ5 * r1^2 +
           6 * λ2 * r2^2 + g^2 * i2^2 * ξ + gp^2 * i2^2 * ξ +
           c3^2 * (2 * λ2 + g^2 * ξ) + c4^2 * (2 * λ2 + g^2 * ξ)) / 4
    M23 = (4 * c1 * λ3 * r2 - c2 * g^2 * i2 * ξ + c2 * gp^2 * i2 * ξ +
           c3 * r1 * (2 * λ4 + 2 * λ5 - g^2 * ξ) +
           c4 * i1 * (-2 * λ4 + 2 * λ5 + g^2 * ξ)) / 4
    M24 = (4 * c2 * λ3 * r2 + c1 * g^2 * i2 * ξ - c1 * gp^2 * i2 * ξ +
           c3 * i1 * (2 * λ4 - 2 * λ5 - g^2 * ξ) +
           c4 * r1 * (2 * λ4 + 2 * λ5 - g^2 * ξ)) / 4
    M25 = (2 * c2 * i1 * (λ4 - λ5) + 2 * c1 * (λ4 + λ5) * r1 +
           4 * c3 * λ2 * r2 + c4 * gp^2 * i2 * ξ - c3 * g^2 * r2 * ξ) / 4
    M26 = (2 * c1 * i1 * (-λ4 + λ5) + 2 * c2 * (λ4 + λ5) * r1 +
           4 * c4 * λ2 * r2 - c3 * gp^2 * i2 * ξ - c4 * g^2 * r2 * ξ) / 4
    M27 = (2 * c2 * c3 * (λ4 - λ5) + 2 * c1 * c4 * (-λ4 + λ5) +
           4 * i2 * λ5 * r1 + 4 * i1 * (λ3 + λ4 - λ5) * r2 +
           (c2 * c3 * g^2 - c1 * c4 * g^2 - (g^2 + gp^2) * i2 * r1) * ξ) / 4
    M28 = i1 * λ5 * r1 + i2 * λ2 * r2 - ((g^2 + gp^2) * i2 * r2 * ξ) / 4
    M33 = (6 * c1^2 * λ1 + 2 * i1^2 * λ1 + 2 * c3^2 * λ3 + 2 * c4^2 * λ3 +
           2 * i2^2 * λ3 + 2 * c3^2 * λ4 + 2 * c4^2 * λ4 + 2 * c3^2 * λ5 -
           2 * c4^2 * λ5 +
           4 * m112 + 2 * λ1 * r1^2 + 2 * λ3 * r2^2 + g^2 * i1^2 * ξ +
           g^2 * r1^2 * ξ + c2^2 * (2 * λ1 + (g^2 + gp^2) * ξ)) / 4
    M34 = c1 * c2 * λ1 + c3 * c4 * λ5 - (c1 * c2 * (g^2 + gp^2) * ξ) / 4
    M35 = (4 * c2 * c4 * λ5 + 2 * i1 * i2 * (λ4 + λ5) +
           4 * c1 * c3 * (λ3 + λ4 + λ5) - 4 * m122 +
           2 * λ4 * r1 * r2 + 2 * λ5 * r1 * r2 + c2 * c4 * (g^2 + gp^2) * ξ +
           g^2 * (i1 * i2 + r1 * r2) * ξ) / 4
    M36 = c1 * c4 * (λ3 + λ4 - λ5) +
          ((i2 * r1 - i1 * r2) * (2 * λ4 - 2 * λ5 + g^2 * ξ) +
           c2 * c3 * (4 * λ5 - (g^2 + gp^2) * ξ)) / 4
    M37 = (2 * c3 * i2 * (λ4 + λ5) - 2 * c4 * λ4 * r2 + 2 * c4 * λ5 * r2 -
           c2 * gp^2 * r1 * ξ + c1 * i1 * (4 * λ1 - g^2 * ξ)) / 4
    M38 = (4 * c1 * i2 * λ3 + 2 * c4 * λ4 * r1 - 2 * c4 * λ5 * r1 -
           c4 * g^2 * r1 * ξ + c2 * g^2 * r2 * ξ - c2 * gp^2 * r2 * ξ +
           c3 * i1 * (2 * λ4 + 2 * λ5 - g^2 * ξ)) / 4
    M44 = (2 *
           (c1^2 * λ1 + 3 * c2^2 * λ1 + i1^2 * λ1 + c4^2 * λ3 + i2^2 * λ3 +
            c4^2 * λ4 + c3^2 * (λ3 + λ4 - λ5) + c4^2 * λ5 + 2 * m112 +
            λ1 * r1^2 + λ3 * r2^2) +
           (c1^2 * (g^2 + gp^2) + g^2 * (i1^2 + r1^2)) * ξ) / 4
    M45 = c2 * c3 * (λ3 + λ4 - λ5) +
          (-((i2 * r1 - i1 * r2) * (2 * λ4 - 2 * λ5 + g^2 * ξ)) +
           c1 * c4 * (4 * λ5 - (g^2 + gp^2) * ξ)) / 4
    M46 = (4 * c1 * c3 * λ5 + 2 * i1 * i2 * (λ4 + λ5) +
           4 * c2 * c4 * (λ3 + λ4 + λ5) - 4 * m122 +
           2 * λ4 * r1 * r2 + 2 * λ5 * r1 * r2 + c1 * c3 * (g^2 + gp^2) * ξ +
           g^2 * (i1 * i2 + r1 * r2) * ξ) / 4
    M47 = (2 * c4 * i2 * (λ4 + λ5) + 2 * c3 * λ4 * r2 - 2 * c3 * λ5 * r2 +
           c1 * gp^2 * r1 * ξ + c2 * i1 * (4 * λ1 - g^2 * ξ)) / 4
    M48 = (4 * c2 * i2 * λ3 - 2 * c3 * λ4 * r1 + 2 * c3 * λ5 * r1 +
           c3 * g^2 * r1 * ξ - c1 * g^2 * r2 * ξ +
           c1 * gp^2 * r2 * ξ + c4 * i1 * (2 * λ4 + 2 * λ5 - g^2 * ξ)) / 4
    M55 = (6 * c3^2 * λ2 + 2 * i2^2 * λ2 + 2 * c1^2 * λ3 + 2 * c2^2 * λ3 +
           2 * i1^2 * λ3 + 2 * c1^2 * λ4 + 2 * c2^2 * λ4 + 2 * c1^2 * λ5 -
           2 * c2^2 * λ5 +
           4 * m222 + 2 * λ3 * r1^2 + 2 * λ2 * r2^2 + g^2 * i2^2 * ξ +
           g^2 * r2^2 * ξ + c4^2 * (2 * λ2 + (g^2 + gp^2) * ξ)) / 4
    M56 = c3 * c4 * λ2 + c1 * c2 * λ5 - (c3 * c4 * (g^2 + gp^2) * ξ) / 4
    M57 = (4 * c3 * i1 * λ3 + 2 * c2 * λ4 * r2 - 2 * c2 * λ5 * r2 +
           c4 * g^2 * r1 * ξ - c4 * gp^2 * r1 * ξ - c2 * g^2 * r2 * ξ +
           c1 * i2 * (2 * λ4 + 2 * λ5 - g^2 * ξ)) / 4
    M58 = c3 * i2 * λ2 + (c1 * i1 * (λ4 + λ5) + c2 * (-λ4 + λ5) * r1) / 2. -
          ((c3 * g^2 * i2 + c4 * gp^2 * r2) * ξ) / 4
    M66 = (6 * c4^2 * λ2 + 2 * i2^2 * λ2 + 2 * c1^2 * λ3 + 2 * c2^2 * λ3 +
           2 * i1^2 * λ3 + 2 * c1^2 * λ4 + 2 * c2^2 * λ4 - 2 * c1^2 * λ5 +
           2 * c2^2 * λ5 + 4 * m222 + 2 * λ3 * r1^2 + 2 * λ2 * r2^2 +
           g^2 * i2^2 * ξ + g^2 * r2^2 * ξ +
           c3^2 * (2 * λ2 + (g^2 + gp^2) * ξ)) / 4
    M67 = (4 * c4 * i1 * λ3 - 2 * c1 * λ4 * r2 + 2 * c1 * λ5 * r2 -
           c3 * g^2 * r1 * ξ +
           c3 * gp^2 * r1 * ξ + c1 * g^2 * r2 * ξ +
           c2 * i2 * (2 * λ4 + 2 * λ5 - g^2 * ξ)) / 4
    M68 = (2 * c2 * i1 * (λ4 + λ5) + 2 * c1 * λ4 * r1 - 2 * c1 * λ5 * r1 +
           c3 * gp^2 * r2 * ξ + c4 * i2 * (4 * λ2 - g^2 * ξ)) / 4
    M77 = (6 * i1^2 * λ1 + 2 * c3^2 * λ3 + 2 * c4^2 * λ3 + 2 * i2^2 * λ3 +
           2 * i2^2 * λ4 + 2 * i2^2 * λ5 + 4 * m112 + 2 * λ1 * r1^2 +
           2 * λ3 * r2^2 + 2 * λ4 * r2^2 - 2 * λ5 * r2^2 +
           g^2 * r1^2 * ξ + gp^2 * r1^2 * ξ + c1^2 * (2 * λ1 + g^2 * ξ) +
           c2^2 * (2 * λ1 + g^2 * ξ)) / 4
    M78 = (2 *
           (c2 * c4 * λ4 + c2 * c4 * λ5 + c1 * c3 * (λ4 + λ5) +
            2 * i1 * i2 * (λ3 + λ4 + λ5) - 2 * m122 + 2 * λ5 * r1 * r2) +
           (c1 * c3 * g^2 + c2 * c4 * g^2 + (g^2 + gp^2) * r1 * r2) * ξ) / 4
    M88 = (6 * i2^2 * λ2 + 2 * c1^2 * λ3 + 2 * c2^2 * λ3 + 2 * i1^2 * λ3 +
           2 * i1^2 * λ4 + 2 * i1^2 * λ5 + 4 * m222 + 2 * λ3 * r1^2 +
           2 * λ4 * r1^2 - 2 * λ5 * r1^2 +
           2 * λ2 * r2^2 + g^2 * r2^2 * ξ + gp^2 * r2^2 * ξ +
           c3^2 * (2 * λ2 + g^2 * ξ) + c4^2 * (2 * λ2 + g^2 * ξ)) / 4


    return [
        M11 M12 M13 M14 M15 M16 M17 M18;
        M12 M22 M23 M24 M25 M26 M27 M28;
        M13 M23 M33 M34 M35 M36 M37 M38;
        M14 M24 M34 M44 M45 M46 M47 M48;
        M15 M25 M35 M45 M55 M56 M57 M58;
        M16 M26 M36 M46 M56 M66 M67 M68;
        M17 M27 M37 M47 M57 M67 M77 M78;
        M18 M28 M38 M48 M58 M68 M78 M88
    ]
end

"""
    scalar_squared_masses(fields, params)

Compute the squared scalar masses given values for the fileds `fields` and
parameters `params`.

# Example
```julia
julia> flds = Fields([1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
julia> pars = Params([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
julia> scalar_squared_masses(flds, pars)
[4.0 2.0 0.0 0.0 0.0 0.0 0.0 0.0;
 2.0 4.0 0.0 0.0 0.0 0.0 0.0 0.0;
 0.0 0.0 2.0 0.0 0.0 0.0 0.0 0.0;
 0.0 0.0 0.0 2.0 0.0 0.0 0.0 0.0;
 0.0 0.0 0.0 0.0 2.0 0.0 0.0 0.0;
 0.0 0.0 0.0 0.0 0.0 2.0 0.0 0.0;
 0.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0;
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0]
```
"""
function scalar_squared_masses(
    fields::Fields{T},
    params::Params{U}
) where {T<:Real,U<:Real}
    jacobi(scalar_squared_mass_matrix(fields, params))
end
